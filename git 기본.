원하는 폴더에서 git init
-> .git 생성 : 로컬 저장소	//버전 정보, 원격 저장소 주소 등 저장.

원격 저장소에서 내 컴퓨터로 코드를 받아오면 로컬 저장소가 자동 생성.
※ 한 폴더에 하나의 로컬 저장소만 유지.


commit : 하나의 버전. 덩어리.

옛날 버전으로 돌아갈 수 있다.

git add 파일명	
	git add .   //폴더내 전체 파일 git에 추가

git commit -m "커밋메세지"

git log


commit한 이력은 연결되어 있어서 그전과 다른 변경사항이 뭔지 편하게 확인 가능.


git remote add  내 컴퓨터 프로젝트 폴더에 GitHub 저장소 주소 알려주기.
	git remote add origin https://github.com/아이디/이름.git
	
	원격 저장소에서 repo 만들 때 git ignore 를 만들면 기본 ignore 옵션 설정할 수 있다.
	
git push 
	git push origin master
	

git clone 원격 저장소의 데이터를 로컬 저장소로 가져온다.
	git clone https://github.com/아이디/이름.git			현재폴더 하위에 repo 명의 디렉토리에 생성.
	git clone https://github.com/아이디/이름.git .		현재폴더에 생성


만약 내가 다른사람의 repository 에 기여를 하려면 그 사람이 나를 colaborators 추가를 해야하고, 내가 수락 한 뒤부터 그 repo에 push 가능

git pull  원격 저장소의 데이터를 가져오기.
	git pull origin master	origin의 master 브랜치에서 파일을 땡겨온다.
	
	
	
chapter 3

궁금증.
1. 커밋 객체에는 무엇이 저장?
2. 두 사람이 병렬로 커밋?
3. 두 사람이 만든 버전 어떻게 합침?
4. 남이 만든 오픈소스에는 어떻게 기여?


소스트리(sourceTree) 설치 - GUI 환경 구축.  그때 그때 CLI도 쓰고 GUI도 쓴다.

소스트리 add > 탐색 > boxiting-cat 폴더 선택 > 추가
탭 추가
소스트리 add > 탐색 > boxiting-oct 폴더 선택 > 추가

git은 변경된 파일은 새로 모두 저장. 변경되지 않은 파일은 변경되지 않았다 라고 저장. (한 버전을 보려면 바로 이전 커밋만 보면 된다.)

프로젝트 폴더
	작업 공간	(/)
	로컬저장소 	(/.git) 
	스테이지 	(/.git/stage)
	커밋 
add 	: 한 파일은 스테이지로 올라감. 									파일 상태 : 스테이지됨 상태.
commit	: 스테이지에 있는 모든 파일을 커밋. (수정없음 상태는 수정없다고만 커밋) (스테이지에도 계속 놔둠) 	파일 상태 : 수정 없음 상태.
push	: commit 한 파일들을 원격저장소로 복사

파일 수정시 : 		파일 상태 : 수정함 상태
파일 새로 생성 : 	파일 상태 : 추적안됨 상태

untractked : 추적안됨
tracked : 수정없음 수정함 스테이지됨

도구 > 인증 > 계정 추가 가능.


커밋 하면 
master
origin/master 표시가 있다.

origin이 안붙은건 로컬에만 있다.


브랜치
고양 1 고양 2 고양3 고양 4
고양 1 고양 2 고양3 문어 A

n줄로 쌓고 합치는 시점에 명시적으로 충돌 해결.

여태까지는 master 브랜치에 커밋을 푸쉬하고 있었다.   HEAD가 지금 작업하는 로컬브랜치를 가리킴.

git branch cat : cat 브랜치를 현재 시점에 만들어라.

git checkout cat : cat 브랜치로 이동해라. HEAD가 cat 브랜치로 옮겨간다.

					master
고양1 고양2 고양3 고양4 
					cat <- HEAD   HEAD가 옮겨간다.
					
feat/main-page 브랜치 생성.     feat/ 는 기능의 약자.  나중에 만든 브랜치중 feat 이 앞에 붙은거만 모아 볼 수 있다.


브랜치 탭에는 로컬저장소의 브랜치만 보임.

원격 탭에서 다른 브랜치도 확인가능.
원격 탭의 브랜치로 이동하고 싶다면 해당 브랜치 더블 클릭 후 브랜치 체크 아웃.
다시 다른 브랜치로 이동하려면 해당 브랜치 더블클릭.   바로 바로 파일에 변경사항이 반영된다!

git merge oct

먼저 base가 될 master (고양 4 까지 가있음) 브랜치로 이동 (브랜치의 master 더블클릭)
compare 브랜치인 oct (문어 A 까지 가있음) 를 나와 합치고 싶다고 명령
git merge oct

합친 결과는 문어 A로 이때 oct와 master 브랜치는 모두 문어 A를 가리킨다.

gui 에서 하는법 : master 브랜치로 이동 후 compare 하고싶은 브랜치를 그래프에서 우클릭 > 병합 누르기.
원격 저장소에도 적용하려면 push 누르기


merge 하는 과정.
1. Fast-forward		어떤 하나가 하나에 포함될때.
2. Merge commit		둘을 합집합한 머지 커밋 생성.
3. Conflict			충돌


Conflict 해결 
	머지할 떄 두 버전이 같은 곳을 수정했다면 이를 수동으로 고쳐줘야 한다.
	base : 스파링 좋아요
	compare : 스파링 싫어요
		merge : 충돌나는 부분을 보여줌.   위 : base 사항 / 아래 : compare 사항.
	<<<<~~~~ >>>> 부분 지우고 수동으로 협의하여 업데이트.
	충돌 해결시 새로운 머지 커밋 생성
	
	<<<<<<< HEAD
	3. 스파링 좋아요
	=======
	3. 스파링 싫어요
	>>>>>>> feat/main-page


	
Fetch : 새로고침


Fork ; 저장소 통째로 복제하기.

boxiting 권한이 없을 때 오픈소스에 기여하려면 반드시 커밋전에 colaborators 등록을 부탁해야할까?

Fork 로 boxiting 저장소를 내 계정에 복제한 다음.
자유롭게 커밋 푸시 하고,  내 저장소의 브랜치를 boxiting 저장소의 브랜치에 머지해달라고 요청.

브랜치 vs 포크
브랜치  : 하나의 원본저장소에 분기 나누기.   편리 : 코드 커밋 이력을 편하게 볼 수 있다.  불편 : 다수의 브랜치가 생기면 관리 힘듦
포크 : 여러 원격저장소에 분기 나누기.  편리 : 마음껏 코드 수정 가능. 불편 : 이력을 보려면 따로 주소 추가 필요.

원격저장소에서 fork 버튼 누르기.

으엉. 여기부터는 실습 불가. (계정 추가 불가)

pull request :
포크한 저장소에서 기능 개발 완료.
이 커밋이랑 저 커밋을 합치는걸 허락해주세요.

어떤 변경을 했는지 제목과 내용 쓰기.
단일 저장소에서도 할 수 있고, 포크한 저장소에서도 보낼 수 있다.

1.코드를 함께 작성하는 팀원이 있다면, 직접 머지하지 말고 모든 머지는 풀 리퀘스트를 통해서 하기.
2.동료가 내 풀리퀘스트를 보고 코드를 리뷰 할 수 있다.
3.동료의 PR에 수정이 필요하면 댓글을 달아 change request 를 보낼 수 있다.
4.오픈 소스에 PR 보낼 때는 기여 안내문서(contribution guideline)를 반드시 참고해야한다.

브랜치 관리
1.보통 feat/기능이름 으로 한 사람이 개발하는 기능 브랜치. (or fix/버그이름   hotfix/급한버그 )
2.작업 끝나면 dev 혹은 master 브랜치로 PR 보내기
3.dev 브랜치에서 큼지막한 작업이 모두 머지되면 release (or latest) 브랜치로 머지시키고 이를 실서버에 배포.
4.직접 커밋은 feat(혹은 fix, hotfix)브랜치에서만 한다.
5.dev, master, release 브랜치에는 직접 커밋하지 않고 머지만 한다.

