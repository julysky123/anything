- 가상함수
 1. 어느 함수를 호출할 지는 컴파일 시간에 이루어진다.
 2. 따라서 Animal p = &d; //Dog class 인 경우.
 
 
//1. 컴파일러는 무조건 p가 animal 이라고 생각. animal 선언을 조사해서 virtual 이 있는지 확인. (Animal 함수의 virtual 명시가 중요. Dog는 있으나 없으나 무방)
//2. virtual 이 없다면 무조건 animal cry로 호출 결정
//3. 있다면, p가 가리키는 곳의 메모리를 조사하는 기계어 코드 생성. 실행시간에 그 기계어 코드 실행하여 메모리 조사 및 함수 호출.
	
  
- 가상함수 런타임 동작 원리  
  //Animal 의 가상함수가 있다면 컴파일러가 추가한 *vtptr 이 같이 생성되고 그 포인터가 Animal의 모든 가상함수의 주소가 들어가있음. 5개있다면 5칸 테이블
	//RTTI 정보 / &Animal.cry
	//Dog도 가상함수가 있으니까 *vtptr 생성
	//RTTI (RunTime Type Information) 정보 / 기반클래스의 가상함수들의 주소. (재정의한 것은 재정의 한 함수 주소, 나머지 가상함수는 그대로 물려받음)

	//가상함수를 사용하면 메모리 오버헤드
	//1. *vtptr은 객체당 하나씩 이게 존재.
	//2. 테이블. 이거는 Animal 객체가 여러개더라도 클래스당 한개의 테이블.

	//실행시 오버헤드
	//p->cry();
	//p->vtptr[1]() 라는 기계어 코드 생성. 한번 메모리를 조사하는 오버헤드. [1] 은 컴파일시 정해짐. virtual 함수 위에서부터 적은 순서.



- 기반 클래스의 소멸자 가이드
C++ Core 가이드라인 에 보면 (구글에서 C++ Core Guide line 검색)

https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines

기반 클래스 소멸자는 
1. 가상함수 이거나
2. 가상함수가 아니면 protected 이어야한다. 
protected 인 경우 delete static_cast<Derived*>(p); 과 같이 형변환 하여 파생클래스를 delete 한다.

- 가상함수 재정의시 override 붙이기.
가이드라인 참고시.
1. 가상함수를 처음 만들 때 'virtual' 붙이기.
2. 가상함수를 재정의할 때 'override' 붙이기.

- 순수 가상 함수
virtual void Draw() = 0;	//순수 가상함수 (puer virtual function)


-가상함수 재정의시 리턴타입도 상속계층의 타입으로 변경할 수 있다.
virtual Shape* Clone() { throw error_not_implementation(); }
Rect* Clone() override { return new Rect(*this); }
