모든 파생 클래스의 공통의 특징은 "반드시 기반 클래스에도 있어야 한다."
그래야, 기반 클래스 포인터로 묶어서 사용할 때 해당 기능을 사용할 수 있다.
기반클래스 함수중에서 파생클래스가 재정의 하게 되는 것은 반드시 가상함수로 해야한다.
가상함수가 아닌 함수는 재정의 하지 말라! - effective - c++ 서적에 있는 격언.

객체지향의 3가지 특징 : 캡슐화, 상속성, 다형성

다형성 : 동일한 함수 호출 표현식이 상황(객체)에 따라 다르게 동작하는 것

OCP : 다형성은 OCP 를 만족하는 아주 좋은 코딩.

if else 구문은 새로운걸 추가하면 코드에 변형이 생김. -> OCP를 만족할수 없다.


Prototype pattern
복사본 만드는 가상함수는 항상 유용하게 사용된다.
	virtual Shape* Clone() { return new Shape(*this); }

template method 디자인 패턴
//공통성과 가변성의 분리.
//변하지 않는 코드 내부의 변해야 하는 부분이 있다면 분리되어야한다.

//		--> 변하지 않는 전체적인 흐름을 기반 클래스가 제공하고
// 변해야하는 것을 가상함수(protected 또는 private) 으로 해서 파생 클래스가 변경할 수 있게 한다.
