//정리
//객체지향 디자인 패턴의 핵심 원리

// 1. 공통성과 가변성의 분리(변하지 않는 것으로 부터 변하는 것의 분리)
/// "template method" : 변하는 것을 가상함수로
/// "strategy" :변하는 것을 다른 클래스로 ( 인터페이스 기반 교체, Edit/IValidator )

// 2. 재귀적 포함을 사용하는 디자인
///	 A는 B를 포함하지만 A자신도 포함할 수 있다.
///  A와 B는 공통의 기반 클래스 필요
///  재귀적 포함
///  왜 ?? 재귀적 포함을 사용하려 하는가? 의도가 뭔가??
/// 
///  "composite": 복합객체를 만들려고 재귀적 포함 사용 ==>3일차 메뉴 만들기 수업
///  "decorator": 객체에 동적인 기능 추가 ==> 6일차. 데코레이터 수업(File, ZipDecorator)
/// 


// 3. 간접층의 원리
/// 직접 사용하지 않고 중간층을 통해서 사용하는것
/// 왜 중간층을 만들었는가? 의도에 따라 패턴의 이름 결정
/// "adapter" : 인터페이스의 변경
///  사용자 -----> stack -------> list
/// "facade"  : 사용하기 쉬운 포괄적인 개념의 인터페이스 제공  
///  사용자 -----> TCPServer ---> IPAddres, Socket
/// "bridge"  : 추상(사용자가 사용하는 클래스)와 구현의 상호독립적 업데이트
///  사용자 -----> MP3 ---------> IMP3, IPod
/// "proxy"   : 일반적이고 범용적 용도의 대행자를 통해서 다양한 기능(cache) 추가 사용. 
///  사용자 -----> Calc --------> IPC서버
/// 
