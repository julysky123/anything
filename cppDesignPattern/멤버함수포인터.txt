테크닉 + 오픈소스 제작 철학. 06/02

클래스의 멤버 변수는 
객체 여러개 만들면 여러개 늘어나지만
멤버 함수는 객체를 여러개 만들어도 하나만 존재.
그러면 x,y가 어떤 객체의 x,y인지 어떻게 알까?

-> 핵심 1. 멤버 함수 호출시 객체의 주소(this)가 같이 전달된다 - this call

class Point
{
	int x, y;
public:
	void set(int a, int b)
	{						
		x = a;				
		y = b;				
	}						
};

	void set(Point* this, int a, int b)
	{
		this->x=a;
		this->y=b; 
	} 인 것처럼 변경되어 동작. (정확한건 아님) 실제로는 스택, 레지스터 등등사용.
  
  p1.set(10,20) 의 동작.
  
  	push	20
		push	10        =>진짜 인자는 스택으로(32bit)
		mov		ecx, &p1  =>객체 주소는 ecx 레지스터에
		call	Point::set
    
핵심 2. static 멤버함수는 this가 전달되지 않는다.

핵심 3. 일반함수 포인터에 멤버함수의 주소를 담을 수 없다. (this가 추가되므로)
void(*f2)(int) = &Dialog::Close;  //error

핵심 4. 일반함수 포인터에 static 멤버함수의 주소는 담을 수 있다.
//static void Close2(int n) {}
void(*f3)(int) = &Dialog::Close2;

핵심 5. 멤버 함수의 주소를 담는 포인터 :
  void(Dialog::*f4)(int) = &Dialog::Close;
  
핵심 6. 멤버 함수 포인터로 함수 호출하기.
  (dlg.*f4)(10);		// .* : pointer to member 연산자 (C에는 없고 c++에만 존재)
  () 괄호 이유 : 연산자 우선순위가 .* 보다 ()가 빨라서 f4(10) 우선 확인 방지.
  // 일반 함수 포인터와 사용방법이 달라 이상.
  c++17에 추가된 std::invoke 문법으로 비슷하게 사용가능
  std::invoke(f1,10) // 일반 함수포인터 f1. f1(10) 의 의미
  std::invoke(f4, &dlg, 10) // (dlg.*f4)(10)의 의미
  
  참고. std::mem_fn 이란 C++11 문법도 있다.
	auto f2 = std::mem_fn(&Car::Go);
	//반환된 f2는 멤버 함수 포인터를 쉽게 사용할 수 있는 객체.
	// ()로 호출하면서 객체를 1번째 인자로 보내면된다.
	f2(c, 80);	//c.Go(80);
	std::cout << typeid(f2).name() << std::endl; //mem_fn 의 반환 타입 구하기. 컴파일러마다 다름.

  
 
핵심 7. call back 함수 구현시.
// call back 함수를 c++로 만들때는 반드시 static 멤버함수여야 함
// 그런데 static 멤버함수는 this가 없어서 멤버에 접근 못함.
// this 사용하고싶으면
// 1. callback 함수의 인자로 this 전달 : CreateThread(foo, this)
// 2. 자료구조에 this 보관 - Clock 예제 (static 콜백함수와 일반 멤버 함수에 공통적으로 사용하는 값을 key로 함)
//    map<int, CWnd*> this_map;

// call back 함수 : 사용자가 만들지만, 사용자가 호출하지 않고 시스템에 전달해서 시스템이 호출해 주는것.




// 참고
가상함수테이블의 오버헤드 없애는 기법
가상함수가 많은 오버헤드를 차지하는 경우 가상함수를 없애고 직접 테이블을 구축한다.


struct AFX_MSG
{
	int messageno;
	void(CWnd::* handler)();
};

class MyWindow : public CWnd
{
public:

	void LButtonDown() { cout << "LBUTTON" << endl; }
	void KeyDown() { cout << "KEYBUTTON" << endl; }
	//라이브러리 사용자는 GetMessageMap() 재정의 해서 event table 주소 반환하면 된다.
	AFX_MSG* GetMessageMap() override
	{
		typedef void(CWnd::* HANDLER)(); //멤버 함수 포인터 타입

		//static 붙이면 함수밖으로 나가도 파괴되지 않음.
		static AFX_MSG arr[] = {
			{WM_LBUTTONDOWN,	static_cast<HANDLER>(&MyWindow::LButtonDown)},
			{WM_KEYDOWN,		static_cast<HANDLER>(&MyWindow::KeyDown)},
			{0,0}
		};
		return arr;
	}
};

구글에서 "wxWidget event table" 검색해보기 1번째 링크.

