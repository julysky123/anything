	std::shared_ptr<MenuItem> p1 = std::make_shared<RedMenu>("RED", 11);
  
  class RedMenu : public MenuItem
{
public:
	using MenuItem::MenuItem;	// 기반 클래스의 생성자를 상속해 달라.
	void OnCommand() override { std::cout << "Red Menu" << std::endl; }
};
의 using 문


-함수포인터 클래스
		c++11 의 function 은 함수포인터를 일반화한 클래스. 유연성이 높다.
		std::function<함수모양>
		std::function<void(int)> f;
		

-바인드 ( M항 함수 -> N항 함수 변경 (M>N)
		using namespace std::placeholders; // _1, _2, _3 등이 이 namespace 에 있다.
		std::bind(&foo, _2, _3, 9, _1)(10, 3, 7); // foo(3,7,9,10)
		
	-멤버함수도 받을수있다. 이때 객체를 첫번째 인자라고 생각.
		Camera cam;
		f = std::bind(&Camera::take, &cam, 3, _1);
		f(10); // cam.take(3,10);

// bind 철학
// handler 는 인자가 없는 함수만 담을 수 있다.
// bind를 사용하면 어떤 모양의 함수도 인자가 0개인 함수로 만들 수 있다.
// "Adapter패턴의 일종"
		
const 멤버 함수
	// "상수 객체라도 호출할 수 있게 해달라는 의미"
	// "상수 객체는 상수 멤버 함수만 호출할 수 있다.
// 상수 멤버 함수는 선택이 아닌 필수 문법.
// 멤버 데이터의 값을 변경하지 않은 모든 멤버 함수 (getter)는 반드시 상수멤버함수로 해야한다.
// getxxxx 으로 시작하는 함수는 반드시 상수 멤버 함수로 해야한다.



// RPC( Remote Procedure Call ) 구조 : 다른 프로세스의 함수를 호출.
// java 는 RMI ( Remote Method Invocation) 이라고 한다.

로컬 : Add() -> 1로 변경하여 서버에 전송 -> 서버에서 1을 Add()로 변경하여 활용.
//proxy : Add -> 1
//stub : 1 -> Add (서버)



함수 삭제 문법
class Cursor
{
	// 규칙 1. private 생성자
	// 규칙 2. 복사와 대입 금지. 컴파일러에게 복사 생성자와 대입 연산자 만들지 말라고 요청
private:
	Cursor() {}
	Cursor(const Cursor&) = delete;
	Cursor& operator= (const Cursor&) = delete;	//함수 삭제 문법. public에 있어도 잘 동작.
	// 규칙 3. 오직 한개의 객체만 만들어 반환 하는 static 함수.
public:
	static Cursor& getInstance()
	{
		static Cursor instance;
		return instance;
	}	
};

//동기화 자원을 사용할 때는 RAII기술(생성자/소멸자에서 lock/unlock)로 해야합니다.

std::mutex mtx;
std::lock_guard<std::mutex> lg(mtx);
해당 문법이 생성자에서 mtx.lock() 수행 소멸자에서 mtx.unlock() 수행.
특정 부분에서 unlock 시키려면 블락걸어서 블락 내에서 std::lock_guard<std::mutex> lg(mtx) 선언하면
블락 종료시 소멸하며 unlock.

template 문법

template<typename T> T* Singleton<T>::sinstance = nullptr;
template<typename T> std::mutex Singleton<T>::mtx;


static 멤버 변수 초기화.
class 밖에서
std::map<std::string, Image*> Image::image_map; 와 같이 선언한번 한다.


template 로 클래스 인스턴스화 할 때 의 몰랐던 내용.
//template은 진짜 클래스가 아니라 클래스를 찍어내는 틀.
//클래스 찍어낼때 사용한 애들만 찍는다!!
//template 인스턴스화.
//사용한 함수만 인스턴스화 한다. (지연된 인스턴스 라고 함)
//사용하면 컴파일시 바로 오류 뙇

//템플릿의 인스턴스화 결과를 알수 없나요? : 보통 어셈으로 학인.
//cppinsight.so 에서 확인

//멤버 함수, static 멤버 데이터 : 사용되지 않으면 인스턴스화 x
//non-static 멤버 데이터 : 객체를 생성하면 무조건 메모리에 놓여야해서 사용된 것으로 간주.


