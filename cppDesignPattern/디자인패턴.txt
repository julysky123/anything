1. prototype 패턴
 : 이미 존재하는 객체의 복사본을 통해서 새로운 객체를 만드는 디자인 패턴 
 ( Clone() 가상함수.  java에는 clone()함수가 이미 존재. swift에는 copy()멤버함수가 있다.)
 virtual Shape* Clone() { return new Shape(*this); }

2. template method 패턴
 : 변하지 않는 전체적인 흐름을 기반 클래스가 제공하고 
 변해야 하는 것을 가상함수(protected 또는 private)로 해서 파생 클래스가 변경할 수 있게 한다.
 상속기반(경직). Edit3 (edit 파생 클래스가 정책을 갖고있음)
  a. 런타임에 바꿀필요가 전혀 없고 정책을 다른곳에서 쓸 필요가 없는경우. 접근제한자로 정책 보호등이 가능한 이점이 있다.
 
protected : 
	virtual void DrawImp(){cout << "Draw Shape" << endl;}
public:
	void Draw() {
		cout << "mutex lock" << endl;
		DrawImp();
		cout << "mutex unlock" << endl;
	}
 
3. strategy 패턴
 : 변하지 않는것과 변하는 것을 구분. 변하는 것을 다른 클래스("정책 클래스")로 분리한다.
  a.template method 와는 달리 정책클래스를 다른 곳에서도 쓸 수 있다.
  b.template method 와는 달리 런타임 중 정책 클래스를 변경하여 다른 정책을 사용할 수 있다.
  
struct IValidator {
	virtual bool validate(std::string s, char c) = 0;
	virtual bool iscomplete(std::string s) { return true; }
	virtual ~IValidator() {}
};

class Edit
{
	std::string data;
	IValidator* pVal = nullptr;

public:
	void setValidator(IValidator* p) { pVal = p; }
	std::string getData();
 }
 

4. 책임전가 패턴
사건 (event) 발생시, 처리할 수 있는 객체를 만날 때 까지 고려(chain)에 따라 이동한다.

	//아래 함수가 책임의 전가 (chain of responsibility) 패턴의 핵심입니다.
	void FireLButtonDown()
	{
		//1. event 처리의 우선권은 나에게 있다.
		if (this->LButtonDown() == true) return;

		//2. event 처리를 하지 않거나, false를 반환한 경우 부모 윈도우에 전달.
		if (parent != nullptr)
			parent->FireLButtonDown();
	}

5. Composite 패턴 : DAY4 메뉴3.

복합객체(PopupMenu)는 개별객체(MenuItem) 뿐 아니라 복합객체 자신도 보관한다.
=> 복합객체와 개별객체는 공통의 기반 클래스를 필요로 한다.

복합객체와 객별객체의 사용법이 동일시 된다. (모두 선택시 command 호출)
=> command() 함수는 기반 클래스(BaseMenu)에 있어야 한다.

특징 : 객체의 포함관계가 tree 구조로 구성된다.

팝업메뉴바(루트) -팝업메뉴바(색상) - 메뉴아이템(빨강)
                                   메뉴아이템 (파랑)
	               팝업메뉴바(해상도)


모든 메뉴의 기반 클래스 
class BaseMenu
{
 	std::string title;
public:
	BaseMenu(std::string s) : title(s) {}
	std::string getTitle() const { return title; }
	virtual void command() = 0;
};


6. Adapter 패턴
	1. 클래스 어댑터
	 클래스를 상속받아서 인터페이스를 변경한다.
	class Text : public TextView, public Shape
	{
	public:
		Text(std::string s) : TextView(s) {}

		void Draw() override {
			TextView::Show();
		}
	};

	
	2. 객체 어댑터
	 포인터로 객체를 받아서, 이미 생성한 객체를 특정 형태로 사용할 수 있게 한다.
	 class Text2 : public Shape
	{
		TextView* ptv; //외부에 이미 존재하는 TextView를 가리키게 한다.
	public:
		Text2(TextView* p) : ptv(p){}

		void Draw() override {
			ptv->Show();
		}
	};

// bind 철학
// handler 는 인자가 없는 함수만 담을 수 있다.
// bind를 사용하면 어떤 모양의 함수도 인자가 0개인 함수로 만들 수 있다.


7. 중재자 패턴 (다음주 얘기)

//"global default center " 라는 개념을 만들어 봅시다(이 클래스 제작자가 만든 개념)
	static NotificationCenter& defaultCenter() {
		static NotificationCenter center;
		return center;
	}

// 모든 팀원이 같이 사용하는 통보센터는 아래처럼 꺼내서 사용하면된다.
NotificationCenter& nc = NotificationCenter::defaultCenter();


8. 프록시 패턴
//서버를 대신하는 클래스를 만들어 봅시다.
//대신하는 패턴 : Proxy Pattern
//remote proxy : 원격지 서버를 대신하는 클래스.

//장점	1. 사용자가 IPC를 몰라도 서버를 사용할 수 있다.
//		2. 자주 사용되는 연산은 Cache등으로 관리할 수 있다.
//		3. 그 밖에도 여러가지로 활용 가능
class Calc
{
	int server;
public:
	Calc() {
		server = ec_find_server("Calc");
	}
	int Add(int a, int b) { return ec_send_server(server, 1, a, b); }
	int Sub(int a, int b) { return ec_send_server(server, 2, a, b); }
};

어댑터 패턴과의 차이점. (월요일에 배울 것)
중간에 대신하는 것을 만드는 패턴 (4가지) : adapter, proxy, bridge, facade 패턴.

//왜 중간계층을 만들었는가? 의도.
//adapter : 인터페이스의 변경 의미 : (ex list를 스택으로)
//proxy : 인터페이스의 변경을 위한게 아니고, 대행자를 통해 다양한 활용을 하기 위함.


9. 데코레이터 패턴.
객체에 동적으로 기능을 추가하는 패턴. 데코레이터는 객체에 기능을 추가하고, 기능이 추가된 객체에도 다시 추가 가능하다.
객체와 객체에 기능을 추가하는 객체는 공통의 기반 클래스가 있어야한다.
struct Item
{
	virtual void Fire() = 0;
	virtual ~Item() {}
};

class SpaceShip : public Item// 우주 비행선
{
public:
	void Fire() { std::cout << "Fire Missile" << std::endl; }
};

class LeftMissile : public Item
{
	Item* ship;
public:
	LeftMissile(Item* s) : ship(s) {}
	void Fire()
	{
		if (ship) ship->Fire();
		std::cout << "Fire Left Missile" << std::endl;
	}
};

//GOF 패턴에서 재귀적 포함을 사용하는 것 2개.
//Composite : 재귀적 포함을 사용한 복합 객체 만들기.
//Decorator : 재귀적 포함을 사용한 객체에 동적 기능 추가.

10. Facade 패턴
하위 시스템의 복잡한 절차를 단순화 하는 "포괄적 인터페이스를 지닌 상위 시스템" 을 제공한다.

1차 API C언어 기능별 함수
2차 API C++클래스내에 C언어의 각 함수를 기능별로 만듦
3차 API 2차 API 를 묶어서 포괄적인 인터페이스를 제작.

3차를 만드는 것을 Facade패턴이라고 함.
초급 사용자는 3차 API를 이용해 쉽게 이용.
고급 사용자는 2차 API를 이용해 세세한 설정하여 이용.

11. Bridge 패턴
중간에 계층을 만들어 


12. singleton 패턴
오직 한개의 객체만 존재하는 것.

//Meyer's 싱글톤 : 오직 한개의 객체를 static 지역변수로 만드는 모델
//				Effective-c++ 책의 저자인 scott-meyer가처음 제안한 모델.
	// 규칙 1. private 생성자
	// 규칙 2. 복사와 대입 금지. 컴파일러에게 복사 생성자와 대입 연산자 만들지 말라고 요청		
	// 규칙 3. 오직 한개의 객체만 만들어 반환 하는 static 함수.
class Cursor
{
private:
	Cursor() {}
	Cursor(const Cursor&) = delete;
	Cursor& operator= (const Cursor&) = delete;	//함수 삭제 문법.
public:
	static Cursor& getInstance()
	{
		static Cursor instance;
		return instance;
	}
};

// CRTP ( Curiously Recurring Template Pattern ) + 객체를 힙에 생성 + 멀티쓰레드 lock unlock.
// 기반클래스에서 미래에 만들어질 파생 클래스 이름을 사용하는 기술

//
//안드로이드 프레임워크의 싱글톤 코드 CRTP로 되어있음. 이를 상속해서 싱글톤 객체 구현 (현재는 미사용, static 으로 사용이 간편)
// https://github.com/aosp-mirror/platform_system_core/blob/master/libutils/include/utils/Singleton.h

template<typename T>
class Singleton
{
protected:
	Singleton() {}
	Singleton(const Singleton&) = delete;
	Singleton& operator= (const Singleton&) = delete;
	static std::mutex mtx;
	static T* sinstance;
public:
	static T& getInstance()
	{
		{
			std::lock_guard<std::mutex> lg(mtx); 
			if (sinstance == nullptr)
				sinstance = new T;
		}
		return *sinstance;
	}
};
template<typename T> T* Singleton<T>::sinstance = nullptr;
template<typename T> std::mutex Singleton<T>::mtx;

//Keyboard 클래스도 싱글톤으로 하고싶어요!
class Keyboard : public Singleton <Keyboard>
{

};


Q1 객체의 생성을 OCP 만족하게 할수 없을까?
A1 Factory 패턴


Q2 Undo/Redo 기능을 넣으려면 어떻게 해야할까?
A2 Command 패턴
