1. prototype 패턴
 : 이미 존재하는 객체의 복사본을 통해서 새로운 객체를 만드는 디자인 패턴 
 ( Clone() 가상함수.  java에는 clone()함수가 이미 존재. swift에는 copy()멤버함수가 있다.)
 virtual Shape* Clone() { return new Shape(*this); }

2. template method 패턴
 : 변하지 않는 전체적인 흐름을 기반 클래스가 제공하고 
 변해야 하는 것을 가상함수(protected 또는 private)로 해서 파생 클래스가 변경할 수 있게 한다.
 상속기반(경직). Edit3 (edit 파생 클래스가 정책을 갖고있음)
  a. 런타임에 바꿀필요가 전혀 없고 정책을 다른곳에서 쓸 필요가 없는경우. 접근제한자로 정책 보호등이 가능한 이점이 있다.
 
protected : 
	virtual void DrawImp(){cout << "Draw Shape" << endl;}
public:
	void Draw() {
		cout << "mutex lock" << endl;
		DrawImp();
		cout << "mutex unlock" << endl;
	}
 
3. strategy 패턴
 : 변하지 않는것과 변하는 것을 구분. 변하는 것을 다른 클래스("정책 클래스")로 분리한다.
  a.template method 와는 달리 정책클래스를 다른 곳에서도 쓸 수 있다.
  b.template method 와는 달리 런타임 중 정책 클래스를 변경하여 다른 정책을 사용할 수 있다.
  
struct IValidator {
	virtual bool validate(std::string s, char c) = 0;
	virtual bool iscomplete(std::string s) { return true; }
	virtual ~IValidator() {}
};

class Edit
{
	std::string data;
	IValidator* pVal = nullptr;

public:
	void setValidator(IValidator* p) { pVal = p; }
	std::string getData();
 }
 

4. 책임전가 패턴
사건 (event) 발생시, 처리할 수 있는 객체를 만날 때 까지 고려(chain)에 따라 이동한다.

	//아래 함수가 책임의 전가 (chain of responsibility) 패턴의 핵심입니다.
	void FireLButtonDown()
	{
		//1. event 처리의 우선권은 나에게 있다.
		if (this->LButtonDown() == true) return;

		//2. event 처리를 하지 않거나, false를 반환한 경우 부모 윈도우에 전달.
		if (parent != nullptr)
			parent->FireLButtonDown();
	}

5. Composite 패턴 : DAY4 메뉴3.

복합객체(PopupMenu)는 개별객체(MenuItem) 뿐 아니라 복합객체 자신도 보관한다.
=> 복합객체와 개별객체는 공통의 기반 클래스를 필요로 한다.

복합객체와 객별객체의 사용법이 동일시 된다. (모두 선택시 command 호출)
=> command() 함수는 기반 클래스(BaseMenu)에 있어야 한다.

특징 : 객체의 포함관계가 tree 구조로 구성된다.

팝업메뉴바(루트) -팝업메뉴바(색상) - 메뉴아이템(빨강)
                                   메뉴아이템 (파랑)
	               팝업메뉴바(해상도)


모든 메뉴의 기반 클래스 
class BaseMenu
{
 	std::string title;
public:
	BaseMenu(std::string s) : title(s) {}
	std::string getTitle() const { return title; }
	virtual void command() = 0;
};


6. Adapter 패턴
// bind 철학
// handler 는 인자가 없는 함수만 담을 수 있다.
// bind를 사용하면 어떤 모양의 함수도 인자가 0개인 함수로 만들 수 있다.


7. 중재자 패턴 (다음주 얘기)

//"global default center " 라는 개념을 만들어 봅시다(이 클래스 제작자가 만든 개념)
	static NotificationCenter& defaultCenter() {
		static NotificationCenter center;
		return center;
	}

// 모든 팀원이 같이 사용하는 통보센터는 아래처럼 꺼내서 사용하면된다.
NotificationCenter& nc = NotificationCenter::defaultCenter();


8. 참조계수
객체를 삭제할 때 객체를 참조했던 모든곳에서  객체 사용이 끝난 이후에야 삭제가 가능하기 때문에
참조계수를 이용해 현재 참조하고 있는 곳의 개수를 확인.

class Car 
{
	int mColor;
	int refCount = 0;
protected:
	~Car() { cout << "Car 파괴" << endl; }
public:
	void AddRef() { ++refCount; }
	void Release() { if (--refCount == 0) delete this; }
	
};

외부에서 delete 할수 없도록 소멸자 protected로


Q1 객체의 생성을 OCP 만족하게 할수 없을까?
A1 Factory 패턴


Q2 Undo/Redo 기능을 넣으려면 어떻게 해야할까?
A2 Command 패턴
