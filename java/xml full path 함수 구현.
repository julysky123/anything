xml 구조를 파악해야 하는 일이 생겨 xml java 코드를 작성해봤다.

우선 value를 가지는 항목들이 전부 #text 노드 하위에 있는데 #text는 안보이게 했다. 
모든 함수는 preSeperator, sufSeperator 이 있는데
그때 그때 보기 편한 구분자를 넣고자 했다.


1. 모든 value를 가지고 있는 항목에 대해 full node path를 출력하는 함수.

valueFullPath(nodeList.item(i), "","","/");

public void valueFullPath(Node node, String parentPath,String preSeperator, String sufSeperator){
        String nodeFullPath = parentPath;
        //if(node.getNodeName()!="#text") nodeFullPath +=preSeperator+node.getNodeName()+sufSeperator;
        nodeFullPath +=preSeperator+node.getNodeName()+sufSeperator;
        if(node.getFirstChild()!=null && node.getFirstChild()==node.getLastChild() && node.getFirstChild().getNodeName()=="#text"){
            nodeFullPath+=node.getTextContent().trim();
            writeFile.writeWithNewLine(nodeFullPath);
            return;
        }
        NodeList nodeList = node.getChildNodes();
        int elt=0;
        for(int i=0;i< nodeList.getLength();i++){
            valueFullPath(nodeList.item(i),nodeFullPath,preSeperator,sufSeperator);
        }
    }
    

2. 모든 value를 가지고 있는 항목에 대해 full node path를 출력하는 함수 (배열의 경우 elt뒤에 숫자 입력)

public void valueFullPathWithElt(Node node, String parentPath,String preSeperator, String sufSeperator,Boolean eltFlag, Integer eltNum){
        String nodeFullPath = parentPath;
        //if(node.getNodeName()!="#text") nodeFullPath +=preSeperator+node.getNodeName()+sufSeperator;
        if(eltFlag) nodeFullPath +=preSeperator+node.getNodeName()+eltNum+sufSeperator;
        else nodeFullPath +=preSeperator+node.getNodeName()+sufSeperator;
        if(node.getFirstChild()!=null && node.getFirstChild()==node.getLastChild() && node.getFirstChild().getNodeName()=="#text"){
            nodeFullPath+=node.getTextContent().trim();
            writeFile.writeWithNewLine(nodeFullPath);
            return;
        }
        NodeList nodeList = node.getChildNodes();
        int elt=0;
        for(int i=0;i< nodeList.getLength();i++){
            if(nodeList.item(i).getNodeName()=="elt")
            {
                valueFullPathWithElt(nodeList.item(i),nodeFullPath,preSeperator,sufSeperator,true,elt++);
            }
            else valueFullPathWithElt(nodeList.item(i),nodeFullPath,preSeperator,sufSeperator,false,0);
        }
    }
    
3. 그냥 모든 node에 대해 dfs (사실상 이것부터 시작해서 위 함수들을 만들었다.)

  public void dfs(Node node, String parentPath,String preSeperator, String sufSeperator){
        String nodeFullPath = parentPath;
        nodeFullPath +=preSeperator+node.getNodeName()+sufSeperator;
        if(node.getFirstChild()==null) nodeFullPath+=node.getTextContent().trim();

        writeFile.writeWithNewLine(nodeFullPath);

        if(node.getFirstChild()==null) return;
        NodeList nodeList = node.getChildNodes();
        for(int i=0;i< nodeList.getLength();i++){
            dfs(nodeList.item(i),nodeFullPath,preSeperator,sufSeperator);
        }
    }
    

4. 특정 node를 모두 찾아 해당 node fullpath와 value를 list로 return 하는 함수

  public List<KeyValue> fullParentPath(Node root, String NodeNameExpression, String preSeperator, String sufSeperator) throws XPathExpressionException {
        XPathFactory factory = XPathFactory.newInstance();
        XPath xpath = factory.newXPath();
        // NodeList 가져오기 : row 아래에 있는 모든 col1 을 선택
        NodeList cols = (NodeList)xpath.evaluate(NodeNameExpression, root, XPathConstants.NODESET);
        List<KeyValue> ret = new ArrayList<>();
        for(int i=0;i<cols.getLength();i++){
            Node node = cols.item(i);
            String fullPath = preSeperator+node.getNodeName()+sufSeperator;
            while(node!=root)
            {
                node = node.getParentNode();
                fullPath = preSeperator+node.getNodeName()+sufSeperator + fullPath;
            }
            ret.add(new KeyValue(fullPath,cols.item(i).getTextContent()));
        }
        return ret;
    }


KeyValue 아래처럼 단순하게 생긴 클래스.
public class KeyValue {

    public String key;
    public String value;
    public KeyValue(String key, String value){
        this.key = key;
        this.value = value;
    }
}





--------------------------
main
  public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {


        DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = builderFactory.newDocumentBuilder();

   //     InputSource is = new InputSource(new StringReader(xml));  <-- String xml 에 값을 넣어 활용할때.
   //     Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);

        Document document = builder.parse(FILE_PATH);
        document.getDocumentElement().normalize();
    
    ...
    }
